#!/usr/bin/env ruby

# frozen_string_literal: true

require "set"

# Utility tool to check whether the changes to the gem/engine have been made
# comparing to the 'master' branch.
#
# It automatically builds a dependency tree for all local gems/engines (using .gemspec files)
# and considers a gem "dirty" iff there are changes in its code or in any of its dependencies.
#
# NOTE: when the current branch is "master" everything is considered "dirty" (to make sure that we run
# all tests on master).
#
# Usage:
#   $ .circleci/is-dirty common-testing
#   $ echo $? #=> exit code is 1 if dirty, 0 otherwise, so you can chain it with "&&"
#   $ .circleci/is-dirty common-testing && <run tests>
#
# Inspired by this post https://medium.com/@dan_manges/the-modular-monolith-rails-architecture-fb1023826fc4
module DirtyCI
  # The list of branches which should not
  # use dirty checking and run all checks always
  ALWAYS_RUN = %w[master].freeze

  module_function
  def build_dependency_index
    pattern = File.join(__dir__, "../{engines,gems}/*/*.gemspec")

    gemspecs = Dir.glob(pattern).map do |gemspec_file|
      Gem::Specification.load(gemspec_file)
    end

    names = gemspecs.each_with_object({}) do |gemspec, hash|
      hash[gemspec.name] = []
    end

    tree = gemspecs.each_with_object(names) do |gemspec, hash|
      deps = Set.new(gemspec.dependencies.map(&:name)) + Set.new(gemspec.development_dependencies.map(&:name))
      local_deps = deps & Set.new(names.keys)
      local_deps.each do |local_dep|
        hash[local_dep] << gemspec.name
      end
    end

    # invert tree to show which gem depends on what
    tree.each_with_object(Hash.new { |h, k| h[k] = Set.new }) do |(name, deps), index|
      deps.each { |dep| index[dep] << name }
      index
    end
  end

  def dirty_libraries
    changed_files = `git diff $(git merge-base origin/master HEAD) --name-only`.split("\n")
    raise "failed to get changed files" unless $?.success?

    changed_files.each_with_object(Set.new) do |file, changeset|
      case file
      when %r{^gems/([^\/]+)}
        changeset << Regexp.last_match[1]
      when %r{^engines/([^\/]+)}
        changeset << Regexp.last_match[1]
      end

      changeset
    end
  end

  def dirty?(name)
    current_branch = `git rev-parse --abbrev-ref HEAD`.tr("/", "--").chomp
    return true if ALWAYS_RUN.include?(current_branch)

    libs = dirty_libraries

    return true if libs.include?(name)

    deps = build_dependency_index[name]

    (deps & libs).any?
  end
end

if ARGV.size == 1
  lib_name = ARGV[0]
  if DirtyCI.dirty?(lib_name)
    $stdout.puts "[Dirty Check] #{lib_name} is dirty"
    exit(1)
  else
    $stdout.puts "[Dirty Check] No changes for #{lib_name}. Skip"
    exit(0)
  end
end
